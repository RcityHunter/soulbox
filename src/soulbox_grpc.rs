// Manual gRPC service trait definitions
// This file provides service traits that would normally be generated by tonic-build

use tonic::{Request, Response, Status, Streaming};
use std::pin::Pin;
use futures_util::Stream;

// Include the generated protobuf types
pub use crate::soulbox::v1::*;

// SoulBox service trait 
#[tonic::async_trait]
pub trait SoulBoxService: Send + Sync + 'static {
    async fn create_sandbox(
        &self,
        request: Request<CreateSandboxRequest>,
    ) -> Result<Response<CreateSandboxResponse>, Status>;

    async fn get_sandbox(
        &self,
        request: Request<GetSandboxRequest>,
    ) -> Result<Response<GetSandboxResponse>, Status>;

    async fn list_sandboxes(
        &self,
        request: Request<ListSandboxesRequest>,
    ) -> Result<Response<ListSandboxesResponse>, Status>;

    async fn delete_sandbox(
        &self,
        request: Request<DeleteSandboxRequest>,
    ) -> Result<Response<DeleteSandboxResponse>, Status>;

    async fn execute_code(
        &self,
        request: Request<ExecuteCodeRequest>,
    ) -> Result<Response<ExecuteCodeResponse>, Status>;

    type StreamExecuteCodeStream: Stream<Item = Result<ExecuteCodeStreamResponse, Status>>
        + Send
        + 'static;

    async fn stream_execute_code(
        &self,
        request: Request<ExecuteCodeRequest>,
    ) -> Result<Response<Self::StreamExecuteCodeStream>, Status>;

    async fn upload_file(
        &self,
        request: Request<Streaming<UploadFileRequest>>,
    ) -> Result<Response<UploadFileResponse>, Status>;

    type DownloadFileStream: Stream<Item = Result<DownloadFileResponse, Status>>
        + Send
        + 'static;

    async fn download_file(
        &self,
        request: Request<DownloadFileRequest>,
    ) -> Result<Response<Self::DownloadFileStream>, Status>;

    async fn list_files(
        &self,
        request: Request<ListFilesRequest>,
    ) -> Result<Response<ListFilesResponse>, Status>;

    async fn delete_file(
        &self,
        request: Request<DeleteFileRequest>,
    ) -> Result<Response<DeleteFileResponse>, Status>;

    async fn health_check(
        &self,
        request: Request<HealthCheckRequest>,
    ) -> Result<Response<HealthCheckResponse>, Status>;
}

// Streaming service trait
#[tonic::async_trait]
pub trait StreamingService: Send + Sync + 'static {
    type SandboxStreamStream: Stream<Item = Result<SandboxStreamResponse, Status>>
        + Send
        + 'static;

    async fn sandbox_stream(
        &self,
        request: Request<Streaming<SandboxStreamRequest>>,
    ) -> Result<Response<Self::SandboxStreamStream>, Status>;

    type TerminalStreamStream: Stream<Item = Result<TerminalStreamResponse, Status>>
        + Send
        + 'static;

    async fn terminal_stream(
        &self,
        request: Request<Streaming<TerminalStreamRequest>>,
    ) -> Result<Response<Self::TerminalStreamStream>, Status>;
}

// Server stub generators (simplified)
pub mod soul_box_service_server {
    use super::*;
    
    pub use super::SoulBoxService;
    
    pub struct SoulBoxServiceServer<T> {
        inner: T,
    }
    
    impl<T: SoulBoxService> SoulBoxServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self { inner }
        }
    }
}

pub mod streaming_service_server {
    use super::*;
    
    pub use super::StreamingService;
    
    pub struct StreamingServiceServer<T> {
        inner: T,
    }
    
    impl<T: StreamingService> StreamingServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self { inner }
        }
    }
}